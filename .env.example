# =============================================================================
# 📨 SERVICE DE NOTIFICATION SUPERVIA - CONFIGURATION D'EXEMPLE
# =============================================================================
# Ce fichier sert de modèle pour votre propre fichier .env.
# Copiez ce fichier en .env et remplacez les valeurs ci-dessous.
# NE JAMAIS COMMITER VOTRE FICHIER .env DANS LE DÉPÔT GIT.

# =============================================
# 📡 CONFIGURATION SERVEUR
# =============================================
# Environnement d'exécution : 'development', 'production', ou 'test'
NODE_ENV=development
# Port sur lequel le service écoutera
PORT=3005
# Version de l'API (utilisée dans les préfixes de route)
API_VERSION=v1
# URL publique du service, utilisée pour générer des liens absolus si nécessaire
API_URL=http://localhost:3005

# =============================================
# 🔑 SÉCURITÉ & AUTHENTIFICATION INTER-SERVICES
# =============================================
# SECRET JWT PARTAGÉ - CRITIQUE
# Ce secret DOIT être identique sur TOUS les microservices de l'écosystème.
# Utilisez une chaîne de caractères longue et cryptographiquement aléatoire.
# Commande pour en générer une : node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=votre_secret_jwt_partage_long_et_aleatoire_ici

# Liste des services autorisés à appeler ce service (séparés par des virgules)
# L'ID du service est extrait du champ 'serviceId' ou 'iss' du payload JWT.
ALLOWED_SERVICES=auth-service,metrics-service,payment-service

# =============================================
# 🌐 URLS & CORS
# =============================================
# Origines autorisées à se connecter via requêtes HTTP et WebSockets.
# Séparez les URLs par des virgules. Incluez votre frontend et d'autres outils comme Grafana si besoin.
CORS_ORIGINS=http://localhost:3000,http://localhost:4000

# =============================================
# ✉️ CONFIGURATION E-MAIL (NODEMAILER)
# =============================================
# Pour le développement, Mailtrap.io est une excellente option gratuite.
# Pour la production, utilisez les identifiants de votre fournisseur (SendGrid, Mailgun, etc.)
SMTP_HOST=sandbox.smtp.mailtrap.io
SMTP_PORT=2525
SMTP_SECURE=false # 'true' pour le port 465 (SSL), 'false' pour le 587 (TLS) ou le 2525
SMTP_USER=votre_utilisateur_smtp # Ex: de Mailtrap
SMTP_PASS=votre_mot_de_passe_smtp # Ex: de Mailtrap
SMTP_FROM_NAME="SupervIA Platform"
SMTP_FROM_EMAIL=noreply@supervia.com

# =============================================
# 🔥 CONFIGURATION FIREBASE (POUR NOTIFICATIONS PUSH)
# =============================================
# Contenu JSON de votre clé de compte de service Firebase.
# 1. Allez dans votre console Firebase -> Paramètres du projet -> Comptes de service.
# 2. Cliquez sur "Générer une nouvelle clé privée". Un fichier JSON est téléchargé.
# 3. Copiez TOUT le contenu du fichier JSON et collez-le ici, entre les guillemets simples.
# IMPORTANT: Le JSON doit être sur une seule ligne ou correctement échappé si sur plusieurs lignes.
# Si vous le laissez vide, le service de push sera désactivé.
FIREBASE_SERVICE_ACCOUNT_JSON='{"type": "service_account", "project_id": "votre-project-id", "private_key_id": "...", "private_key": "-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n", "client_email": "...", "client_id": "...", "auth_uri": "...", "token_uri": "...", "auth_provider_x509_cert_url": "...", "client_x509_cert_url": "..."}'

# =============================================
# 🔌 CONFIGURATION REDIS (POUR L'ADAPTATEUR SOCKET.IO)
# =============================================
# Requis si vous prévoyez de scaler le service de notification sur plusieurs instances.
# L'adaptateur Redis permet de synchroniser les événements WebSocket entre les instances.
# Pour le développement local avec le docker-compose global, l'URL est typiquement le nom du service redis.
REDIS_URL=redis://supervia-redis:6379

# =============================================
# 🔧 DÉVELOPPEMENT & LOGS
# =============================================
# Niveau de log ('fatal', 'error', 'warn', 'info', 'debug', 'trace')
LOG_LEVEL=debug
# Activer ou désactiver le endpoint de documentation Swagger UI (/api-docs)
ENABLE_SWAGGER=true

# ==============================================
# 🎯 PROCHAINES ÉTAPES
# ==============================================
# 1. Remplacer les valeurs d'exemple par votre configuration.
# 2. Configurer JWT_SECRET (doit être le même que dans les autres services).
# 3. Fournir les identifiants SMTP et Firebase.
# 4. Lancer `npm run setup` pour installer les dépendances. 